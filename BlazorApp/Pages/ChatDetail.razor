@page "/chat/{userGuid}"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Чаты</PageTitle>

<h1>Чат c пользователем </h1>

<section class="col-12 " style="background-color: #eee; ">
    <div class="container" style="height: 500px; overflow: auto;">
        <div class="row d-flex">
            <div class="col-12 ">
                <div class="d-flex flex-row justify-content-end mb-4">
                    <div class="p-3 me-3 border" style="border-radius: 15px; background-color: #fbfbfb;">
                        <p class="small mb-0">Thank you, I really like your product.</p>
                    </div>
                    <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava2-bg.webp"
                         alt="avatar 1" style="width: 45px; height: 100%;">
                </div>

                @foreach (var message in messages)
                {
                    <div class="d-flex flex-row justify-content-start mb-4">

                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp"
                             alt="avatar 1" style="width: 45px; height: 100%;">

                        <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                            <p class="small mb-0">@message</p>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

    <div class="container">
        <div class="form-outline">
            <textarea class="form-control" @bind="messageInput" rows="4"  id="textAreaExample"></textarea>
            <button type="button" class="btn btn-outline-secondary" @onclick="Send"
                    disabled="@(!IsConnected)">
                Отправить
            </button>
        </div>
    </div>


    <hr>
</section>
<script >
console.log("123123")
</script>

@code {

    [Parameter]
    public string UserGuid { get; set; } = "";

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7172/chat"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", "USER_ID", messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}