@inject LocationService locationService
@using BlazorApp.Models

<RadzenStack Orientation="Orientation.Vertical" Gap="1px">
    <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Left"> Страна</RadzenText>
    <RadzenDropDown AllowClear="true" TValue="string" TextProperty="Name" ValueProperty="Id"
                    LoadData=@LoadData Data=@countries Size="ButtonSize.Small" Change=@OnCountryChange />
</RadzenStack>
<RadzenStack Orientation="Orientation.Vertical" Gap="1px">
    <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Left">Город</RadzenText>
    <RadzenDropDown @ref=@radzenDropDownCities AllowClear="true" TValue="string" TextProperty="Name" ValueProperty="Id"
                    Data=@cities Size="ButtonSize.Small" Change="@OnCityChange" />
</RadzenStack>

@code {
    [Parameter]
    public Guid? CountryId { get; set; }

    [Parameter]
    public Guid? CityId { get; set; }

    [Parameter]
    public EventCallback<Guid> ValueChanged { get; set; }

    RadzenDropDown<string> radzenDropDownCities;

    CountryResponse[]? countries;
    CityResponse[]? cities;

    async Task LoadData(LoadDataArgs args)
    {
        countries = await locationService.GetCountries();

        await InvokeAsync(StateHasChanged);
    }
    public async void OnCountryChange(object value)
    {
        radzenDropDownCities.Reset();

        cities = null;
        CityId = null;
        CountryId = null;

        if (value != null)
        {
            var countryId = (Guid)value;
            CountryId = countryId;
            cities = await locationService.GetCitiesByCountryId(countryId);
          
        }
        StateHasChanged();

        await ValueChanged.InvokeAsync();
    }
    public async void OnCityChange(object value)
    {
        CityId = null;

        if (value != null)
            CityId = (Guid)value;

        StateHasChanged();

        await ValueChanged.InvokeAsync();
    }

 
}
