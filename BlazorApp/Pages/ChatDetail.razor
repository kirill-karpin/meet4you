@page "/chat/{userGuid}"
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using System.Text.Json
@using BlazorApp.Models.Filter
@inject NavigationManager Navigation
@inject FileService FileService
@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProfileService ProfileService

<PageTitle>Чаты</PageTitle>

<h1>Чат с @ChatPartner?.ShortName() </h1>

<RadzenCard  Class="rz-my-12 rz-mx-auto" Style="height: 500px; overflow: scroll;" >
    @foreach (var message in messages)
    {
        var id = message.From.ToString();
        if (id == OwnerGuid)
        {
            <RadzenRow  Style="margin-bottom: 30px" >
                <RadzenStack >
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenStack Style="border-radius: 23px;">
                            <img src="@FileService.GetFilePath(ProfileService?.ImageId)"
                                 alt="avatar 1" style="width: 45px; height: 45px; border-radius: 50%;">
                        </RadzenStack>
                        <RadzenStack Style=" gap: 0 !important;" Orientation="Orientation.Vertical">
                            <RadzenStack>
                                <RadzenLink>@ProfileService?.User?.FirstName:</RadzenLink>
                            </RadzenStack>
                            <RadzenStack>
                                @message.Content
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>
            </RadzenRow>
        }
        else
        {
            <RadzenRow  Style="margin-bottom: 30px" >
                <RadzenStack >
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenStack Style="border-radius: 23px;">
                            <img src="@(FileService.GetFilePath(ChatPartner?.ImageId))"
                                 alt="avatar 1" style="width: 45px; height: 45px; border-radius: 50%;">
                        </RadzenStack>
                        <RadzenStack  Style=" gap: 0 !important;" Orientation="Orientation.Vertical">
                            <RadzenStack>
                                <RadzenLink>@ChatPartner?.ShortName():</RadzenLink>
                            </RadzenStack>
                            <RadzenStack >
                                @message.Content
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>
            </RadzenRow>
        }
    }

</RadzenCard>
<RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal">

        <RadzenHtmlEditor @bind-Value=@messageInput style="height: 100px; width: 90%;" UploadUrl="upload/image">
            <RadzenHtmlEditorUndo/>
        </RadzenHtmlEditor>
        <RadzenButton type="button" Style="width: 10%" Click="Send"
                      disabled="@(!IsConnected)">
            Отправить
        </RadzenButton>
    </RadzenStack>

</RadzenCard>


@code {

    [Parameter]
    public string? UserGuid { get; set; }

    public string? OwnerGuid { get; set; }

    public UserRepsonse? ChatPartner { get; set; }

    public class Message
    {
        public Guid From { get; set; }
        public Guid To { get; set; }
        public string? Content { get; set; }
    }

    protected async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
        string? senderId = user?.FindFirst("Id")?.Value;
        return senderId;
    }

    private HubConnection? hubConnection;
    private ILocalStorageService? localStorage;
    private List<Message> messages = new List<Message>();
    private string? messageInput;


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("chat detail1");
        await JsRuntime.InvokeVoidAsync("console.log", "chat detail");
        var token = await GetUserId();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"https://localhost:7172/chat?token={token}"))
            .WithAutomaticReconnect()
            .Build();


        hubConnection.On<string>("ReceiveMessage", (dataString) =>
        {
            Message? message =
                JsonSerializer.Deserialize<Message>(dataString);

            if (message != null) messages.Add(message);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        messages = await Http.GetFromJsonAsync<List<Message>>($"/api/message/chat/{UserGuid}/items")
                   ?? throw new InvalidOperationException();

        OwnerGuid = await GetUserId();

        var profileResponse = await Http.GetFromJsonAsync<ProfileResponse>($"/api/profile/{UserGuid}");
        ChatPartner = profileResponse?.User;
    }

    private async Task Send()
    {
        Console.WriteLine("Send");
        var senderId = await GetUserId();

        if (senderId != null && UserGuid != null)
        {
            var dataString = JsonSerializer.Serialize(new Message()
            {
                From = new Guid(senderId),
                To = new Guid(UserGuid),
                Content = messageInput
            });

            await hubConnection.SendAsync("SendMessage", dataString);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}