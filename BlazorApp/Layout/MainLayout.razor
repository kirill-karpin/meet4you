@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using System.Text.Json
@using Common
@using Common.Models
@inject IAuthenticationService AuthService;
@inject ProfileService ProfileService;
@inject NavigationManager Navigation
@inherits LayoutComponentBase

<RadzenLayout style="position: relative; grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Gap="50%" JustifyContent="JustifyContent.Stretch" Orientation="Orientation.Horizontal">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@(() => SidebarExpanded = !SidebarExpanded)"/>
                <RadzenLabel Text="Meet4You"/>
            </RadzenStack>


            <RadzenStack Gap="2rem" Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Right" Style="width: 100%">
                <AuthorizeView>
                    <Authorized>
                        <RadzenLabel >
                            Online : @OnlineCount
                        </RadzenLabel>
                        <RadzenLabel >
                            <div class="notification-container">
                                <RadzenIcon Icon="notifications"/>
                                @if (CountNotification > 0)
                                {
                                    <span class="notification-counter"> @CountNotification </span>
                                }
                            </div>
                        </RadzenLabel>
                        <RadzenLabel >
                            <RadzenLink Path="logout">Выход</RadzenLink>
                        </RadzenLabel>

                    </Authorized>
                    <NotAuthorized>
                        <RadzenLabel >
                            <RadzenLink Path="registr">Регистрация</RadzenLink>
                        </RadzenLabel>
                        <RadzenLabel >
                            <RadzenLink Path="logout">Вход</RadzenLink>
                        </RadzenLabel>
                    </NotAuthorized>
                </AuthorizeView>
            </RadzenStack>
        </RadzenStack>

    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="@SidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" Class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => SidebarExpanded = false)"/>
        </RadzenStack>
        <RadzenPanelMenu>
            <NavMenu/>
        </RadzenPanelMenu>

    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    @if (SidebarExpanded)
    {
        <div @onclick="@(() => SidebarExpanded = false)" class="rz-dialog-mask" style="position: absolute; z-index: 2"></div>
    }
</RadzenLayout>

@code {

    public bool SidebarExpanded = false;
    private ILocalStorageService? localStorage;
    private List<NotificationModel> _notifications = new();

    public int? OnlineCount { get; set; } = 0;

    private int? CountNotification
    {
        get => _notifications.Count;
        set => _countNotification = value;
    }

    private bool ShownNotification { get; set; } = false;
    
    private HubConnection? hubConnection;
    private int? _countNotification = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("MainLayout");
        
        var isAuthorized = await AuthService.IsAuthorized();
        if (!isAuthorized)
        {
            Navigation.NavigateTo("/login");    
        }
        else
        {
            var token = await AuthService.GetUserId();

            var profile = await ProfileService.Me();
            if (profile != null)
            {
                ProfileService.Profile = profile;
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(Navigation.ToAbsoluteUri($"https://localhost:7172/status?token={token}"))
                    .Build();

                hubConnection.On<EventMessage>("ReceiveEvent", async (eventMessage) =>
                {
                    Console.WriteLine("ReceiveEvent");
                    Console.WriteLine(eventMessage.Subscriber);
                
                    if (eventMessage.Subscriber == EventSubscriber.Status)
                    {
                        Console.WriteLine("Parse data");
                        var data = eventMessage.DataJson;
                        StatusModel? status = 
                            JsonSerializer.Deserialize<StatusModel>(data);
                        Console.WriteLine("status?.Count");
                        Console.WriteLine(status?.Count);
                        OnlineCount = status?.Count ?? 0;
                    }
                
                    if (eventMessage.Subscriber == EventSubscriber.Notification)
                    {
                        Console.WriteLine("Parse data");
                        var data = eventMessage.DataJson;
                        NotificationModel? notification = 
                            JsonSerializer.Deserialize<NotificationModel>(data);

                        if (notification != null)
                        {
                            _notifications.Add(notification);    
                        }
                    }
                    await InvokeAsync(StateHasChanged);
                });
                await hubConnection.StartAsync();
            }
        }
    }

    private async Task ShowNotificationBlock()
    {
        ShownNotification = !ShownNotification;
    }


}