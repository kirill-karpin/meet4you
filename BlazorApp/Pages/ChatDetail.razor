@page "/chat/{userGuid}"
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Чаты</PageTitle>

<h1>Чат c пользователем </h1>

<RadzenCard Class="rz-my-12 rz-mx-auto" Style="height: 500px; overflow: scroll;">
    @foreach (var message in messages)
    {
        <RadzenRow Gap="0">
            <RadzenStack >
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenStack Style="border-radius: 23px;">
                        <img src="photo-default.jpg"
                             alt="avatar 1" style="width: 45px; height: 45px; border-radius: 50%;">
                    </RadzenStack>
                    <RadzenStack Style=" overflow-wrap: break-word; width: 90%">
                        @message
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        </RadzenRow>
    }

</RadzenCard>
<RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal">

        <RadzenHtmlEditor @bind-Value=@messageInput style="height: 100px; width: 90%;" UploadUrl="upload/image">
            <RadzenHtmlEditorUndo/>
        </RadzenHtmlEditor>
        <RadzenButton type="button" Style="width: 10%" Click="Send"
                      disabled="@(!IsConnected)">
            Отправить
        </RadzenButton>
    </RadzenStack>

</RadzenCard>


@code {

    [Parameter]
    public string UserGuid { get; set; } = "";

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7172/chat"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", "USER_ID", messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}