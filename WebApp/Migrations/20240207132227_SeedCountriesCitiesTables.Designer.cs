// <auto-generated />
using System;
using Install;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240207132227_SeedCountriesCitiesTables")]
    partial class SeedCountriesCitiesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Location.City.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("121403f7-5beb-412c-89f4-5d762fded6b1"),
                            Active = true,
                            CountryId = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6277),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Москва",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6278),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4dfce24f-f97c-4e2a-bbed-cf753dc9ea47"),
                            Active = true,
                            CountryId = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6281),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Санкт-Петербург",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6281),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("716872d5-971e-46b5-b7e9-5f23567ee7ee"),
                            Active = true,
                            CountryId = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6284),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Волгоград",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6284),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d0c7d163-9c48-4931-8d12-6f43eb6a4113"),
                            Active = true,
                            CountryId = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6286),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Владивосток",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6287),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("58eca970-2ea6-4753-beeb-80759b59f0c1"),
                            Active = true,
                            CountryId = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6293),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Екатеринбург",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6293),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f043be63-ac20-4d8c-be06-d2487bb331b6"),
                            Active = true,
                            CountryId = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6296),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Минск",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6296),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f99c42d9-7467-4e5a-8700-1ccd16281d62"),
                            Active = true,
                            CountryId = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6298),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Брест",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6299),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c9cda8a1-528b-42e3-84d1-fcead269260c"),
                            Active = true,
                            CountryId = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6301),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Витебск",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6301),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c2f87884-1e71-4c6c-b68a-6bfbab088c02"),
                            Active = true,
                            CountryId = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6306),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Гомель",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6306),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f948dcc1-b5e3-4c36-9d22-a2218cc4a1ec"),
                            Active = true,
                            CountryId = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6309),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Гродно",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6309),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("9b664a67-1ba0-4f24-a4f5-7611c0a066c4"),
                            Active = true,
                            CountryId = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6311),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Алма-Ата",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6312),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("38ef0274-8a9e-4395-af49-3a5a3478316b"),
                            Active = true,
                            CountryId = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6314),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Нур-Султан",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6314),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7092f36d-8388-4267-831a-42cde3152d36"),
                            Active = true,
                            CountryId = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6320),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Караганда",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b648ac26-b05e-4bb4-98f9-efd598830c49"),
                            Active = true,
                            CountryId = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6322),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Шымкент",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6323),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("72a95a1e-7c22-4005-8359-11d9cf8c71ed"),
                            Active = true,
                            CountryId = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6325),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Петропавловск",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6325),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Location.Country.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92b13c12-7613-4643-8e37-2f70b58086e0"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6209),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Россия",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6211),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2d5234e2-e36b-4d78-8650-8d3eacdd3a64"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6223),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Беларусь",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6223),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4106ad6f-1b50-4f9b-8957-7517e999471a"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6225),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Deleted = false,
                            Name = "Казахстан",
                            Sort = 500,
                            UpdatedAt = new DateTime(2024, 2, 7, 13, 22, 27, 755, DateTimeKind.Utc).AddTicks(6225),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Location.UserLocation.UserLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("Message.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("From")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<Guid>("To")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Confirmed_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FamilyStatus")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("LookingFor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Location.City.City", b =>
                {
                    b.HasOne("Location.Country.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Location.Country.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
